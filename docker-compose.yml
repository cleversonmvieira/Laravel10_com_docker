# Define a versão do Docker Compose que está sendo usada
# A versão 3.8 é uma das versões mais recentes e estável
# que traz compatibilidade com várias funcionalidades.
#version: '3.8'

services:
  # Definição do serviço 'app', que representa a aplicação Laravel
  app:
    # A aplicação será construída com base no Dockerfile localizado na raiz do projeto (indicado pelo '.')
    build: .
    
    # Mapeamento de portas do contêiner para o host
    # A porta 8000 no host será mapeada para a porta 80 do contêiner, permitindo acessar o app via http://localhost:8000
    ports:
      - "8000:80"
    
    # Volume compartilhado entre o host e o contêiner
    # A pasta local 'app' será mapeada para '/var/www/html' dentro do contêiner
    # Isso permite que alterações no código no host sejam refletidas instantaneamente no contêiner
    volumes:
      - ./app:/var/www/html
    
    # Conectando o serviço 'app' à rede interna 'app-network', para se comunicar com outros serviços
    networks:
      - app-network

  # Definição do serviço 'db', que representa o banco de dados MySQL
  db:
    # A imagem do MySQL será baixada automaticamente com base na última versão disponível ('mysql:latest')
    image: mysql:latest
    
    # Configuração de variáveis de ambiente para o contêiner MySQL
    # Estes valores são usados para criar o banco de dados e configurar o acesso
    environment:
      # Senha do usuário root do MySQL
      MYSQL_ROOT_PASSWORD: root_password
      # Nome do banco de dados a ser criado automaticamente
      MYSQL_DATABASE: laravel
      # Nome de usuário a ser criado automaticamente para o banco
      MYSQL_USER: user_laravel
      # Senha do usuário que será criado para o banco
      MYSQL_PASSWORD: password_laravel
    
    # Mapeamento da porta 3306 do contêiner (porta padrão do MySQL) para a mesma porta no host
    # Permite que você se conecte ao MySQL no contêiner via localhost:3306
    ports:
      - "3306:3306"
    
    # Conectando o serviço 'db' à rede interna 'app-network', para que a aplicação possa se comunicar com o banco de dados
    networks:
      - app-network

  # Definição do serviço 'phpmyadmin', que fornece uma interface gráfica para gerenciar o banco de dados MySQL
  phpmyadmin:
    # A imagem do PhpMyAdmin será baixada automaticamente
    image: phpmyadmin/phpmyadmin
    
    # Configuração das variáveis de ambiente para o PhpMyAdmin
    environment:
      # Nome do host (serviço) onde o MySQL está rodando. Neste caso, o serviço 'db' dentro da rede do Docker.
      PMA_HOST: db
      # Nome de usuário do banco de dados que o PhpMyAdmin usará para se conectar (mesmo usuário criado para o MySQL)
      PMA_USER: user_laravel
      # Senha do usuário para acessar o banco de dados
      PMA_PASSWORD: password_laravel
    
    # Mapeamento da porta 8080 no host para a porta 80 do contêiner, permitindo acessar o PhpMyAdmin via http://localhost:8080
    ports:
      - "8080:80"
    
    # Conectando o serviço 'phpmyadmin' à rede interna 'app-network', para que ele possa se comunicar com o banco de dados MySQL
    networks:
      - app-network

# Definição da rede interna 'app-network' usada para comunicação entre os contêineres
networks:
  app-network:
    # Usando o driver 'bridge', que cria uma rede isolada para permitir a comunicação entre os serviços Docker
    driver: bridge
